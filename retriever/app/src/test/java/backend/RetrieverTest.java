/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package backend;

import com.google.protobuf.ByteString;
import io.grpc.ManagedChannel;
import io.grpc.inprocess.InProcessChannelBuilder;
import io.grpc.inprocess.InProcessServerBuilder;
import io.grpc.stub.StreamObserver;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

import static org.junit.Assert.*;

//Adapted from https://github.com/grpc/grpc-java/blob/master/examples/src/test/java/io/grpc/examples/routeguide/RouteGuideServerTest.java

@RunWith(JUnit4.class)
public class RetrieverTest {

    private Retriever server;
    private ManagedChannel inProcessChannel;

    String[] fileNames = new String[]{
            "src/test/java/backend/grpc-icon-color.png",
            "src/test/java/backend/test.txt",
            "src/test/java/backend/Hyla_japonica_sep01.jpg"
    };

    private final String bucket = "veit";
    private final Logger logger = Logger.getLogger("retrieverTest");


    @Before
    public void setUp() throws Exception {
        String servername = InProcessServerBuilder.generateName();
        server = new Retriever(
                InProcessServerBuilder
                        .forName(servername)
                        .directExecutor()
                , 9390
        );
        server.start();
        inProcessChannel = InProcessChannelBuilder
                .forName(servername)
                .directExecutor()
                .build();
    }

    @After
    public void tearDown() throws Exception {
        server.stop();
    }

    //TODO: Check the optimal chunk size - Testing from example hasn't bee that exhaustive yet
    @Test
    public void saveFiles() throws Exception {
        StreamObserver<UploadStatus> responseObserver = new StreamObserver<UploadStatus>() {
            @Override
            public void onNext(UploadStatus value) {
                logger.log(Level.INFO, "Upload status: "+value.getCode());
            }

            @Override
            public void onError(Throwable t) {
                logger.log(Level.WARNING, "An error occured while trying to send a file"+t.getMessage());
            }

            @Override
            public void onCompleted() {
                logger.log(Level.INFO, "Finished sending file.");
            }
        };

        for(String fileName : fileNames) {

            RetrieverGrpc.RetrieverStub stub = RetrieverGrpc.newStub(inProcessChannel);
            StreamObserver<Chunk>  requestObserver = stub.saveFiles(responseObserver);

            File file = new File(fileName);
            byte[] fileBytes = Files.readAllBytes(file.toPath());
            int i = 0;
            int j = 1000;

            while (j < fileBytes.length) {
                ByteString b = ByteString.copyFrom(Arrays.copyOfRange(fileBytes, i, j));
                Chunk chunk = Chunk.newBuilder()
                        .setFileDescription(
                                FileDescription.newBuilder()
                                        .setFileName(fileName)
                                        .setBucket(bucket)
                                        .build()
                        )
                        .setContent(b)
                        .build();
                requestObserver.onNext(chunk);
                i = j;
                j += 1000;
            }

            //TODO: Should be able to make this code look a lot nicer!
            ByteString b = ByteString.copyFrom(Arrays.copyOfRange(fileBytes, i, fileBytes.length));
            Chunk chunk = Chunk.newBuilder()
                    //TODO: Make Filedescription non repetetive
                    .setFileDescription(
                            FileDescription.newBuilder()
                                    .setFileName(fileName)
                                    .setBucket(bucket)
                                    .build()
                    )
                    .setContent(b)
                    .build();

            requestObserver.onNext(chunk);

            requestObserver.onCompleted();
        }
    }

    //Working -> Needs proper automatic testing though!
    @Test
    public void getFiles() throws Exception {

        StreamObserver<Chunk> responseObserver = new StreamObserver<Chunk>() {

            String fn;
            String b;
            ByteString bs;;

            @Override
            public void onNext(Chunk value) {
                if(fn ==null & b ==null) {
                    fn = value.getFileDescription().getFileName();
                    b = value.getFileDescription().getBucket();
                    logger.log(Level.INFO, "Receiving file with name: "+ fn);
                }
                if(bs==null) {
                    bs = (ByteString) value.getContent();
                } else {
                    bs = bs.concat((ByteString) value.getContent());
                }
            }

            @Override
            public void onError(Throwable t) {
                logger.log(Level.WARNING, "Failed to receive file");
            }

            @Override
            public void onCompleted() {
                try {
                    assertEquals(fn, fileNames[0]); //TODO: Make assertion work properly
                    FileOutputStream fs = new FileOutputStream("grpc-icon-color.png");
                    fs.write(bs.toByteArray());
                } catch (Exception e) {
                    logger.log(Level.WARNING, "Failed to receive file");
                }
            }
        };

        FileDescription fD = FileDescription.newBuilder()
                .setFileName(fileNames[0])
                .setBucket(bucket)
                .build();

        DownloadRequest dR = DownloadRequest.newBuilder()
                .setFileDescription(fD)
                .build();

        RetrieverGrpc.RetrieverStub stub = RetrieverGrpc.newStub(inProcessChannel);
        stub.getFiles(dR, responseObserver);

    }

    //getStructure working correctly -> Still needs real automated testing!
    @Test
    public void getStructure() throws Exception {
        StreamObserver<Structure> responseObserver = new StreamObserver<Structure>() {

            ArrayList<Object> s;

            @Override
            public void onNext(Structure value) {
                logger.log(Level.INFO, "Receiving structure for bucket: "+bucket);
                s = new ArrayList<>(value.getObjectList());
                logger.log(Level.INFO, ""+s.size());
                for(Object o : s) {
                    logger.log(Level.INFO, "Filename: "+o.getName()+", filetype: "+o.getType());
                }
            }

            @Override
            public void onError(Throwable t) {
                logger.log(Level.WARNING, "An error occurred while trying to receive the structure of bucket: "+bucket+", "+t.getMessage());
            }

            @Override
            public void onCompleted() {

            }
        };

        StructureRequest sr = StructureRequest.newBuilder()
                .setBucket(bucket)
                .setDirectory("src/test/java/backend/") //Directories NEED to look like this!
                //.setDirectory("")
                .build();

        RetrieverGrpc.RetrieverStub stub = RetrieverGrpc.newStub(inProcessChannel);
        stub.getStructure(sr, responseObserver);
    }
}
