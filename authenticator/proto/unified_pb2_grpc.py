# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import unified_pb2 as unified__pb2


class RetrieverStub(object):
    """--------------Retriever---------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.saveFiles = channel.stream_unary(
                '/fileserver.Retriever/saveFiles',
                request_serializer=unified__pb2.Chunk.SerializeToString,
                response_deserializer=unified__pb2.UploadStatus.FromString,
                )
        self.getStructure = channel.unary_unary(
                '/fileserver.Retriever/getStructure',
                request_serializer=unified__pb2.StructureRequest.SerializeToString,
                response_deserializer=unified__pb2.Structure.FromString,
                )
        self.getFiles = channel.unary_stream(
                '/fileserver.Retriever/getFiles',
                request_serializer=unified__pb2.DownloadRequest.SerializeToString,
                response_deserializer=unified__pb2.Chunk.FromString,
                )


class RetrieverServicer(object):
    """--------------Retriever---------------

    """

    def saveFiles(self, request_iterator, context):
        """Should also be included in the frontend
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStructure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RetrieverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'saveFiles': grpc.stream_unary_rpc_method_handler(
                    servicer.saveFiles,
                    request_deserializer=unified__pb2.Chunk.FromString,
                    response_serializer=unified__pb2.UploadStatus.SerializeToString,
            ),
            'getStructure': grpc.unary_unary_rpc_method_handler(
                    servicer.getStructure,
                    request_deserializer=unified__pb2.StructureRequest.FromString,
                    response_serializer=unified__pb2.Structure.SerializeToString,
            ),
            'getFiles': grpc.unary_stream_rpc_method_handler(
                    servicer.getFiles,
                    request_deserializer=unified__pb2.DownloadRequest.FromString,
                    response_serializer=unified__pb2.Chunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileserver.Retriever', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Retriever(object):
    """--------------Retriever---------------

    """

    @staticmethod
    def saveFiles(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/fileserver.Retriever/saveFiles',
            unified__pb2.Chunk.SerializeToString,
            unified__pb2.UploadStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStructure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileserver.Retriever/getStructure',
            unified__pb2.StructureRequest.SerializeToString,
            unified__pb2.Structure.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/fileserver.Retriever/getFiles',
            unified__pb2.DownloadRequest.SerializeToString,
            unified__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class authenticatorStub(object):
    """--------------Authenticator------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getKeys = channel.unary_unary(
                '/fileserver.authenticator/getKeys',
                request_serializer=unified__pb2.Empty.SerializeToString,
                response_deserializer=unified__pb2.Keys.FromString,
                )
        self.login = channel.unary_unary(
                '/fileserver.authenticator/login',
                request_serializer=unified__pb2.User.SerializeToString,
                response_deserializer=unified__pb2.Token.FromString,
                )


class authenticatorServicer(object):
    """--------------Authenticator------------

    """

    def getKeys(self, request, context):
        """Rpc for getting public keys of the backend
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """Rpc to log in a user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_authenticatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.getKeys,
                    request_deserializer=unified__pb2.Empty.FromString,
                    response_serializer=unified__pb2.Keys.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=unified__pb2.User.FromString,
                    response_serializer=unified__pb2.Token.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileserver.authenticator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class authenticator(object):
    """--------------Authenticator------------

    """

    @staticmethod
    def getKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileserver.authenticator/getKeys',
            unified__pb2.Empty.SerializeToString,
            unified__pb2.Keys.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileserver.authenticator/login',
            unified__pb2.User.SerializeToString,
            unified__pb2.Token.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class authorizerStub(object):
    """--------------Authorizer---------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.isAuthorized = channel.unary_unary(
                '/fileserver.authorizer/isAuthorized',
                request_serializer=unified__pb2.AuthRequest.SerializeToString,
                response_deserializer=unified__pb2.AuthReply.FromString,
                )
        self.addAuthorization = channel.unary_unary(
                '/fileserver.authorizer/addAuthorization',
                request_serializer=unified__pb2.AuthRequest.SerializeToString,
                response_deserializer=unified__pb2.Added.FromString,
                )


class authorizerServicer(object):
    """--------------Authorizer---------------

    """

    def isAuthorized(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addAuthorization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_authorizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'isAuthorized': grpc.unary_unary_rpc_method_handler(
                    servicer.isAuthorized,
                    request_deserializer=unified__pb2.AuthRequest.FromString,
                    response_serializer=unified__pb2.AuthReply.SerializeToString,
            ),
            'addAuthorization': grpc.unary_unary_rpc_method_handler(
                    servicer.addAuthorization,
                    request_deserializer=unified__pb2.AuthRequest.FromString,
                    response_serializer=unified__pb2.Added.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileserver.authorizer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class authorizer(object):
    """--------------Authorizer---------------

    """

    @staticmethod
    def isAuthorized(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileserver.authorizer/isAuthorized',
            unified__pb2.AuthRequest.SerializeToString,
            unified__pb2.AuthReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addAuthorization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileserver.authorizer/addAuthorization',
            unified__pb2.AuthRequest.SerializeToString,
            unified__pb2.Added.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
